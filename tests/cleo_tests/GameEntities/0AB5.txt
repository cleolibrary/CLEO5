{$CLEO .s}
{$INCLUDE_ONCE ../cleo_tester.inc}

script_name '0AB5'
test("0AB5 (store_closest_entities)", tests)
terminate_this_custom_script


function tests
    int carHandle = -1
    int pedHandle = -1
    before_each(@setup)
    after_each(@cleanup)

    it("should find entities", test1)
    return
    
    
    :setup
        while not is_player_playing $player1
            wait 0
        end
        
        set_player_control $player1 {state} false
        set_police_ignore_player {player} $player1 {state} true
        set_char_proofs $scplayer {bulletProof} true {fireProof} true {explosionProof} true {collisionProof} true {meleeProof} true
        
        set_area_visible {areaId} 0
        set_char_area_visible $scplayer {areaId} 0
        warp_char_from_car_to_coord $scplayer {pos} 2737.8 -1760.3 43.15
        set_char_heading $scplayer {heading} 0.0
        restore_camera_jumpcut
        load_scene {pos} 2737.8 -1760.3 43.15
        request_collision {xy} 2737.8 -1760.3
        
        set_ped_density_multiplier {multiplier} 0.0
        set_car_density_multiplier {multiplier} 0.0
        clear_area {pos} 0.0 0.0 0.0 {radius} 100000.0 {clearParticles} true
        
        // spawn test entities
        carHandle = SpawnCar()
        pedHandle = SpawnPed()
    return


    :cleanup
        set_player_control $player1 {state} true
        set_police_ignore_player {player} $player1 {state} false
        set_char_proofs $scplayer {bulletProof} false {fireProof} false {explosionProof} false {collisionProof} false {meleeProof} false
        
        if
            does_vehicle_exist {handle} carHandle
        then
            delete_car carHandle
        end
        carHandle = -1
        
        if
            does_char_exist {handle} pedHandle
        then
            delete_char pedHandle
        end
        pedHandle = -1
    return


    function test1(carHandle: int, pedHandle: int)
        int foundCar, foundPed
                
        // ignore mission entities
        wait {time} 1000
        foundCar = 0x666
        foundPed = 0x666
        foundCar, foundPed = store_closest_entities $scplayer
        assert_eq(foundCar, -1)
        assert_eq(foundPed, -1)
        
        // detect non-mission entities
        mark_car_as_no_longer_needed carHandle
        mark_char_as_no_longer_needed pedHandle
        
        wait {time} 1000
        foundCar = 0x666
        foundPed = 0x666
        foundCar, foundPed = store_closest_entities $scplayer
        assert_eq(foundCar, carHandle)
        assert_eq(foundPed, pedHandle)
        
        // should find nothing
        clear_area {pos} 0.0 0.0 0.0 {radius} 100000.0 {clearParticles} true
        wait {time} 1000
        foundCar = 0x666
        foundPed = 0x666
        foundCar, foundPed = store_closest_entities $scplayer
        assert_eq(foundCar, -1)
        assert_eq(foundPed, -1)
    end
end


function SpawnCar(): int
    float x, y, z
    x = generate_random_float_in_range {min} -5.0 {max} 5.0
    y = generate_random_float_in_range {min} 4.0 {max} 6.0
    z = 0.0

    x, y, z = get_offset_from_char_in_world_coords $scplayer {offset} x y z
    
    request_model 400
    load_all_models_now
    int carHandle = create_car {modelId} 400 {pos} x y z
    mark_model_as_no_longer_needed 400
    
    return carHandle
end


function SpawnPed(): int
    float x, y, z
    x = generate_random_float_in_range {min} -5.0 {max} 5.0
    y = generate_random_float_in_range {min} 4.0 {max} 6.0
    z = 0.0

    x, y, z = get_offset_from_char_in_world_coords $scplayer {offset} x y z
    
    request_model 7
    load_all_models_now
    int pedHandle = create_char {type} PedType.CivMale {model} 7 {pos} x y z
    mark_model_as_no_longer_needed 7
    
    return pedHandle
end

