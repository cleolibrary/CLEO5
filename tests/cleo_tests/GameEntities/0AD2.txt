{$CLEO .s}
{$INCLUDE_ONCE ../cleo_tester.inc}

script_name '0AD2'
test("0AD2 (get_char_player_is_targeting)", tests)
terminate_this_custom_script

function tests
    int pedHandle
    before_each(@setup)
    after_each(@cleanup)
    it("should return char player is targeting", test1)
    return
    
    
    :setup
        while not is_player_playing $player1
            wait 0
        end
        
        set_player_control $player1 {state} false
        set_police_ignore_player {player} $player1 {state} true
        set_char_proofs $scplayer {bulletProof} true {fireProof} true {explosionProof} true {collisionProof} true {meleeProof} true
        
        set_area_visible {areaId} 0
        set_char_area_visible $scplayer {areaId} 0
        warp_char_from_car_to_coord $scplayer {pos} 2737.8 -1760.3 43.15
        set_char_heading $scplayer {heading} 0.0
        restore_camera_jumpcut
        load_scene {pos} 2737.8 -1760.3 43.15
        request_collision {xy} 2737.8 -1760.3
        
        set_ped_density_multiplier {multiplier} 0.0
        set_car_density_multiplier {multiplier} 0.0
        clear_area {pos} 0.0 0.0 0.0 {radius} 100000.0 {clearParticles} true
        
        // spawn test entities
        pedHandle = SpawnPed(#MALE01)
    return


    :cleanup
        set_player_control $player1 {state} true
        set_police_ignore_player {player} $player1 {state} false
        set_char_proofs $scplayer {bulletProof} false {fireProof} false {explosionProof} false {collisionProof} false {meleeProof} false
        
        if
            does_char_exist {handle} pedHandle
        then
            delete_char pedHandle
        end
        pedHandle = -1
        
        clear_area {pos} 0.0 0.0 0.0 {radius} 100000.0 {clearParticles} true
    return
    
    
    function test1(pedHandle: int)
        int modelId = get_weapontype_model {weaponType} WeaponType.Pistol
        request_model {modelId} modelId
        load_all_models_now
        give_weapon_to_char $scplayer {weaponType} WeaponType.Pistol {ammo} 0xFFFFFF
        mark_model_as_no_longer_needed {modelId} modelId
        wait {time} 0
        
        int targeted 
        
        // no target
        wait {time} 0
        targeted = 0x666
        targeted = get_char_player_is_targeting $player1
        assert_result_false()
        assert_eq(targeted, -1)
        
        // hack set target as otherwise it would need user action
        int playerPtr = get_ped_pointer {char} $scplayer
        int targetPtr = get_ped_pointer {char} pedHandle
        write_memory_with_offset {address} playerPtr {offset} 0x79C {size} 4 {value} targetPtr // CPlayerPed::m_pPlayerTargettedPed
        
        // get target
        targeted = 0x666
        targeted = get_char_player_is_targeting $player1
        assert_result_true()
        assert_eq(targeted, pedHandle)
    end
end


function SpawnPed(modelIdx: int): int
    float x, y, z
    x = generate_random_float_in_range {min} -5.0 {max} 5.0
    y = generate_random_float_in_range {min} 4.0 {max} 6.0
    z = -1.0

    x, y, z = get_offset_from_char_in_world_coords $scplayer {offset} x y z
    
    request_model modelIdx
    load_all_models_now
    int pedHandle = create_char {type} PedType.CivMale {model} modelIdx {pos} x y z
    mark_model_as_no_longer_needed modelIdx
    
    return pedHandle
end
