{$CLEO .s}
{$INCLUDE_ONCE ../cleo_tester.inc}

script_name "0AA8"
test("0AA8 (call_method_return)", tests)
terminate_this_custom_script


function tests
    it("should call class getter method", test1)
    it_cs4("should ignore null 'this' in legacy modes", test2)
    it_cs4("should handle misused 'this' in legacy modes", test3)
    it("should set condition result", test4)
    it_cs4("should not set condition in legacy modes", test5)
    return


    function test1
        int charPtr = get_ped_pointer {char} $scplayer
        int result = call_method_return {address} 0x00411990 {struct} charPtr {numParams} 0 {pop} 0 // CEntity.GetMatrix()
        int matrixPtr = read_memory_with_offset {address} charPtr {offset} 0x14 {size} 4 // CEntity::m_matrix
        assert_eq(result, matrixPtr)
    end


    function test2
        int result = call_method_return {address} 0x00826330 {struct} 0 {numParams} 1 {pop} 1 {funcParams} "test" // size_t strlen(const char *Str)
        assert_eq(result, 4)
    end


    function test3
        int funcPtr = get_label_pointer @ret_ecx
        int result = call_method_return {address} funcPtr {struct} 10 {numParams} 0 {pop} 0
        assert_eq(result, 11)
    end


    function test4
        int funcPtr = get_label_pointer @increment
        int result

        // 1 -> 2 = true
        result = 666
        is_australian_game // set result false
        result = call_method_return {address} funcPtr {struct} 0x20000 {numArgs} 1 {pop} 1 {args} 1
        assert_result_true()
        assert_eq(result, 2)

        // 0 -> 1 = true
        result = 666
        is_australian_game // set result false
        result = call_method_return {address} funcPtr {struct} 0x20000 {numArgs} 1 {pop} 1 {args} 0
        assert_result_true()
        assert_eq(result, 1)

        // -1 -> 0 = false
        result = 666
        is_pc_version // set result true
        result = call_method_return {address} funcPtr {struct} 0x20000 {numArgs} 1 {pop} 1 {args} -1
        assert_result_false()
        assert_eq(result, 0)
        
        // 0xFF -> 0x100 = true
        result = 666
        is_australian_game // set result false
        result = call_method_return {address} funcPtr {struct} 0x20000 {numArgs} 1 {pop} 1 {args} 0xFF
        assert_result_true()
        assert_eq(result, 0x100)
    end


    function test5
        int funcPtr = get_label_pointer @increment
        int result

        is_australian_game // set result false
        result = call_method_return {address} funcPtr {struct} 0x20000 {numArgs} 1 {pop} 1 {args} 1
        assert_result_false()
        
        is_pc_version // set result true
        result = call_method_return {address} funcPtr {struct} 0x20000 {numArgs} 1 {pop} 1 {args} 1
        assert_result_true()
    end
end


:ret_ecx
hex
    89 C8   // mov eax, ecx
    40      // inc eax
    C3      // retn
end


:increment
hex
    8B 44 24 04  // mov eax, [esp + 4]
    40        // inc eax
    C3        // retn
end