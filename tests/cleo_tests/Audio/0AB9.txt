{$CLEO .s}
{$INCLUDE_ONCE ../cleo_tester.inc}

script_name '0AB9'
test("0AB9 (get_audio_stream_state)", tests)
terminate_this_custom_script

const Test_File = ".\Speech.mp3"

function tests
    int stream
    before_each(@setup)
    after_each(@cleanup)

    it("should return set state", test1)
    it("should return Stopped when finished", test2)
    return
    

    :setup
        stream = load_audio_stream Test_File
        assert_result_true()
    return


    :cleanup
        remove_audio_stream stream
        stream = -1
    return


    function test1(stream: int)
        int state
        
        // starts as stopped
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, 2) // AudioStreamState.Paused
        
        // still paused
        wait {time} 0
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, 2) // AudioStreamState.Paused
        
        // play, effective right away
        set_audio_stream_state stream {action} AudioStreamAction.Play
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, 1) // AudioStreamState.Playing
        
        // still playing
        wait {time} 0
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, 1) // AudioStreamState.Playing
        
        // stop, effective right away
        set_audio_stream_state stream {action} AudioStreamAction.Stop
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, -1) // AudioStreamState.Stopped
        
        // still stopped
        wait {time} 0
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, -1) // AudioStreamState.Stopped
        
        // stopped can not turn into paused
        set_audio_stream_state stream {action} AudioStreamAction.Pause
        state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, -1) // AudioStreamState.Stopped
    end


    function test2(stream: int)        
        set_audio_stream_progress stream {progress} 0.99
        set_audio_stream_state stream {action} AudioStreamAction.Play
        
        wait {time} 200
        int state = 0x666
        state = get_audio_stream_state stream
        assert_eq(state, -1) // AudioStreamState.Stopped
    end
end


terminate_this_custom_script
