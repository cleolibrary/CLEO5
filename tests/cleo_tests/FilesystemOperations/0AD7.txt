{$CLEO .s}
goto @TEST_DATA_END
hex
    "1234567890ABCDEF1234567890ABCDE" 00 // data A - 32 characters
    "123" 0A // data B
    "12" 0D 0A // data C
    "1234" // padding
end
:TEST_DATA_END
const Test_Data_Offset_A = 7 // skip goto + target
const Test_Data_Offset_B = 39
const Test_Data_Offset_C = 43

{$INCLUDE_ONCE ../cleo_tester.inc}

script_name "0AD7"
test("0AD7 (read_string_from_file)", tests)
terminate_this_custom_script


function tests
    before_each(@setup)
    after_each(@cleanup)

    it("should read nothing", test1)
    it("should read one", test2)
    it("should read two", test3)
    it("should read four", test4)
    it("should read eight", test5)
    it("should overflow dest string variable", test6)
    it("should read till line feed (\\n)", test7)
    it("should read till line feed (\\r\\n)", test8)

    return
    
    :setup
        0@ = open_file {filePathName} ".\0AD7.s" {mode} "r"
        1@ = 0xCCCCCCCC
        2@ = 0xCCCCCCCC
        3@ = 0xCCCCCCCC
        4@ = 0xCCCCCCCC
    return
    
    :cleanup
        close_file 0@
    return
    
    function test1
        file_seek 0@ {offset} Test_Data_Offset_A {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 0
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eq(2@, 0xCCCCCCCC)
        assert_eq(3@, 0xCCCCCCCC)
        assert_eq(4@, 0xCCCCCCCC)
    end
    
    function test2
        file_seek 0@ {offset} Test_Data_Offset_A {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 1
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "") // just terminator character
        assert_eq(3@, 0xCCCCCCCC)
        assert_eq(4@, 0xCCCCCCCC)
    end
    
    function test3
        file_seek 0@ {offset} Test_Data_Offset_A {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 2
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "1")
        assert_eq(3@, 0xCCCCCCCC)
        assert_eq(4@, 0xCCCCCCCC)
    end
    
    function test4
        file_seek 0@ {offset} Test_Data_Offset_A {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 4
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "123")
        assert_eq(3@, 0xCCCCCCCC)
        assert_eq(4@, 0xCCCCCCCC)
    end
    
    function test5
        file_seek 0@ {offset} Test_Data_Offset_A {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 8
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "1234567")
        assert_eq(4@, 0xCCCCCCCC)
    end
    
    function test6
        file_seek 0@ {offset} Test_Data_Offset_A {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 10
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "12345678")
        assert_eqs(4@s, "9") // overflowed data
    end
    
    function test7
        file_seek 0@ {offset} Test_Data_Offset_B {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 8
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "123")
        assert_eq(4@, 0xCCCCCCCC)
    end
    
    function test8
        file_seek 0@ {offset} Test_Data_Offset_C {origin} SeekOrigin.Begin
        read_string_from_file 0@ {storeTo} 2@s {maxLength} 8
        assert_result_true()
        assert_eq(1@, 0xCCCCCCCC)
        assert_eqs(2@s, "12")
        assert_eq(4@, 0xCCCCCCCC)
    end
end
