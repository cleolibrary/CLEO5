{$CLEO .s}
{$USE input}
{$INCLUDE_ONCE ../cleo_tester.inc}

const Key_5 = 0x35
const Key_6 = 0x36


script_name '2082'
test("2082 (get_key_just_pressed_in_range)", tests)
terminate_this_custom_script


function tests
    before_each(@cleanup)
    after_each(@cleanup)
    it("should return just pressed key code", test1)
    return
    
    
    :cleanup
        SetKeyState(Key_5, false) // release 5
        SetKeyState(Key_6, false) // release 6
        wait {time} 0
    return
    
    
    function test1()
        int key
    
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_false()
        assert_eq(key, -1)
                
        SetKeyState(Key_6, true) // press 6
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_true()
        assert_eq(key, Key_6)
        
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_false()
        assert_eq(key, -1)
        
        SetKeyState(Key_6, false) // release 6
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_false()
        assert_eq(key, -1)
        
        SetKeyState(Key_5, true) // press 5
        SetKeyState(Key_6, true) // press 6
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_true()
        assert_eq(key, Key_5)
        
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_false()
        assert_eq(key, -1)
        
        // 5 is still down
        SetKeyState(Key_6, false) // release 6
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_false()
        assert_eq(key, -1)
        
        SetKeyState(Key_6, false) // release 6
        wait {time} 0
        SetKeyState(Key_6, true) // press 6
        wait {time} 0
        
        key = -1
        key = get_key_just_pressed_in_range {minKeyCode} KeyCode.Num0 {maxKeyCode} KeyCode.Num9
        assert_result_true()
        assert_eq(key, Key_6)
    end
end


function SetKeyState(keyCode: int, down: int)
    int libUser32 = load_dynamic_library "user32.dll"
    assert_result_true()
        
    int procSendInput = get_dynamic_library_procedure "SendInput" {library} libUser32
    assert_result_true()
    
    int data = get_label_pointer @INPUT_KEY_DATA
    
    write_memory_with_offset {address} data {offset} 4 {size} 1 {value} keyCode
    
    if
        down == true
    then
        write_memory_with_offset {address} data {offset} 8 {size} 4 {value} 0
    else
        write_memory_with_offset {address} data {offset} 8 {size} 4 {value} 2 // KEYEVENTF_KEYUP
    end
    
    call_function {address} procSendInput {numParams} 3 {pop} 0 {funcParams} 28 data 1
    
    free_dynamic_library libUser32
    
    return
    
    :INPUT_KEY_DATA
    hex
        01 00 00 00 // INPUT_KEYBOARD
        00 00 // virtual key code
        00 00 // scan
        00 00 00 00 // flags
        00 00 00 00 // time
        00 00 00 00 00 00 00 00 00 00 00 00 // padding
    end
end
